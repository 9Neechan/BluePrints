%

****************************** Доступные поля *********************************

* type - тип сообщения (Всего их 3 типа:  "config" / "answer_config" / "event")
* id - кому адресовано (опционально)
* message - объект в котором могут быть доступны ключи ключи id, event, text (опционально)
* event - Событие-триггер (опционально)
* text - команда к исполнению (опционально)

##############################################################################################################################################################
##############################################################################################################################################################
##############################################################################################################################################################
************************************************************** Сообщение типа "Запрос конфига" ************************************************************
{"type":"request","message":{"id":1,}}
{
    "type": "request",
    "message":
    {
      "id":1,
    }
}

Соответственно на первом этапе, после нажания кнопки "search" происходит отправка в последовательный порт всем устройствам (из файлика, допустим [1, 2, 3])
{"type":"request","message":{"id":1,}}
*ждем ответа*
{"type":"request","message":{"id":2,}}
*ждем ответа*
{"type":"request","message":{"id":3,}}
*ждем ответа*


##############################################################################################################################################################
##############################################################################################################################################################
##############################################################################################################################################################
**************************************************Сообщение типа "Настройка" на запрос конфига высылается настройка*******************************************

****************************** Не трогать, не читать, не смотреть (нужно для демонстрации ******************************
{"type":"config","message":{"id":1,"event":"create id2","text":"id2 = new Object(); id2.ulala=true; id2.exist=true;"}}
{"type":"event","message":{"event":"create id2","text":""}}
{"type":"config","message":{"id":1,"event":"id2.ulala","text":"if (id2.ulala){ mode_2(1); } else { mode_2(0); }"}}
{"type":"event","message":{"event":"id2.ulala","text":"id2.ulala=true"}}
{"type":"event","message":{"event":"id2.ulala","text":"id2.ulala=false"}}


* Создаем команду на событие "id1.button_long_1", т.к. по умолчанию реакции никакой не будет
** кнопка без фиксации (нажал - загорелось, отпустил - погасло)
{"type":"config","message":{"id":1,"event":"id1.button_long_1","text":"if (id1.button_long_1){ mode_2(1); } else { mode_2(0); }"}}
** кнопка с фиксацией (нажал - изменил состояние, отпустил - ничего не поменялось)
{"type":"config","message":{"id":1,"event":"id1.button_long_1","text":"if (id1.button_long_1){ mode_2(!id1.mode_1); }"}}

* Пример но уже в развернутом виде для двойного нажатия. Тут тоже кнопка без фиксации
{"type":"config","message":{"id":1,"event":"id1.button_double_1","text":"if (id1.button_double_1){ mode_2(1); } else { mode_2(0); }"}}
{
    "type": "config",
    "message":
    {
      "id":1,
      "event":"id1.button_long_1",
      "text":"if (id1.button_long_1){ mode_1(1); } else { mode_1(0); }"
    }
}

*Данный формат сообщений  используется для отправки настроек на устройства. Машин выход должен быть преобразован в этот формат. Т.е, если раньше было что-то в роде:
{
  "id": 1, 						# кому пришлём
  "comands": [
    {
      "on_event":"id1.button_single_1",			# на что реагировать
      "exe": "if (id1.button_single_1 == true){ mode_1(!id1.mode_1); }" # как реагировать
    },
    {
      "on_event":"id1.button_single_2",			# на что реагировать
      "exe": "if (id1.button_single_2 == true){ mode_2(!id1.mode_2); }" # как реагировать
    }
  ]
}
* То теперь оно должно выглядеть так:
{
    "type": "config",
    "message":
    {
      "id":1,
      "event":"id1.button_single_1",
      "text":"if (id1.button_single_1 == true){ mode_1(!id1.mode_1); }"
    }
}
{
    "type": "config",
    "message":
    {
      "id":1,
      "event":"id1.button_single_2",
      "text":"if (id1.button_single_2 == true){ mode_2(!id1.mode_2); }"
    }
}
* И по очереди их отсылать




##############################################################################################################################################################
##############################################################################################################################################################
##############################################################################################################################################################
****************Сообщение типа "Cобытия": при получении проверка подписанных топиков, исполнение "text" и команды, если такой же топик найден ****************
* Это моё - таким образом устройства общаются между собой, желательно к ознакомлению, при помощи этих команд можно управлять через логгер

* Сообщение типа "событие" (нажатие кнопки, обновление данных с датчиков ...) id неуказан, т.к. исполнитель может быть любым
* Сделано по костыльному, но, по сути, мы дистанционно 'дергаем' кнопку на устройстве :-)

{"type":"event","message":{"event":"id1.button_single_1","text":"id1.button_single_1=true"}}
{"type":"event","message":{"event":"id1.button_long_1","text":"id1.button_long_1=true"}}
{
    "type": "event",
    "message":
    {
      "event":"id1.button_single_1",
      "text": "id1.button_single_1 = true"
    }
}

%